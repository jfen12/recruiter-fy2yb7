name: Candidate Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/services/candidate/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/services/candidate/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: candidate-service
  ECS_CLUSTER: refactortrack-cluster
  ECS_SERVICE: candidate-service
  WORKING_DIRECTORY: src/backend/services/candidate

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKING_DIRECTORY }}/node_modules
            ${{ env.WORKING_DIRECTORY }}/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Tests with Coverage
        run: npm run test
        env:
          CI: true

      - name: Build TypeScript
        run: |
          npm run clean
          npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist

  security:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@v1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Build Docker Image for Scanning
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: false
          load: true
          tags: ${{ env.ECR_REPOSITORY }}:scan
          target: builder

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Environment
    needs: [build, security]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }}-${{ github.event.inputs.environment || 'development' }} \
            --force-new-deployment \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100" \
            --desired-count ${{ github.event.inputs.environment == 'production' && '3' || github.event.inputs.environment == 'staging' && '2' || '1' }}

      - name: Wait for Deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}-${{ github.event.inputs.environment || 'development' }}

      - name: Verify Deployment Health
        run: |
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }}-${{ github.event.inputs.environment || 'development' }} \
            --query 'taskArns[0]' \
            --output text)
          
          aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].healthStatus' \
            --output text | grep -q "HEALTHY"