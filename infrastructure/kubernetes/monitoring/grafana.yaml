# Grafana Kubernetes Manifest
# Version: 9.5.0
# Dependencies:
# - kubernetes v1.24+
# - grafana v9.5.0
# - prometheus v2.45.0

---
# PersistentVolumeClaim for Grafana storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: refactortrack
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# ConfigMap for Grafana configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: refactortrack
  labels:
    app: grafana
    component: monitoring
data:
  grafana.ini: |
    [server]
    protocol = http
    http_port = 3000
    domain = grafana.refactortrack.local
    root_url = %(protocol)s://%(domain)s/
    serve_from_sub_path = true

    [security]
    admin_user = admin
    allow_embedding = false
    cookie_secure = true
    disable_gravatar = true
    strict_transport_security = true

    [auth]
    disable_login_form = false
    oauth_auto_login = false
    disable_signout_menu = false

    [users]
    allow_sign_up = false
    auto_assign_org_role = Editor

    [metrics]
    enabled = true
    basic_auth_username = metrics
    disable_total_stats = false

    [dashboards]
    versions_to_keep = 20
    min_refresh_interval = 5s

  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        version: 1
        editable: false
        jsonData:
          timeInterval: "15s"
          queryTimeout: "30s"
          httpMethod: "POST"
          manageAlerts: true

  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'RefactorTrack'
        orgId: 1
        folder: 'RefactorTrack'
        type: file
        disableDeletion: true
        editable: false
        options:
          path: /var/lib/grafana/dashboards

---
# Deployment for Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: refactortrack
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - grafana
                topologyKey: kubernetes.io/hostname
      containers:
        - name: grafana
          image: grafana/grafana:9.5.0
          ports:
            - name: http
              containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: config
              mountPath: /etc/grafana
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: config
          configMap:
            name: grafana-config
        - name: dashboards
          emptyDir: {}

---
# Service to expose Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: refactortrack
  labels:
    app: grafana
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: grafana

---
# NetworkPolicy for Grafana
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: refactortrack
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 9090
    - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53