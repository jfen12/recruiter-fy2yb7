# External Dependencies:
# - kubernetes v1.24+
# - alertmanager v0.25.0

---
# AlertManager ConfigMap containing alert routing and notification configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: refactortrack
  labels:
    app: alertmanager
    component: monitoring
    part-of: refactortrack
data:
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
      slack_api_url: '${SLACK_API_URL}'  # To be provided via environment variable
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alertmanager@refactortrack.com'
      smtp_auth_username: '${SMTP_USERNAME}'  # To be provided via environment variable
      smtp_auth_password: '${SMTP_PASSWORD}'  # To be provided via environment variable

    templates:
      - '/etc/alertmanager/templates/*.tmpl'

    route:
      receiver: 'default-receiver'
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      group_by: ['alertname', 'cluster', 'service']

      routes:
      # Critical security alerts route
      - receiver: 'security-team'
        group_wait: 30s
        match:
          severity: critical
          type: security
        continue: true

      # Performance alerts route
      - receiver: 'ops-team'
        group_wait: 1m
        match:
          type: performance
        continue: true

      # Infrastructure alerts route
      - receiver: 'infrastructure-team'
        group_wait: 1m
        match:
          type: infrastructure

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'cluster', 'service']

    receivers:
    - name: 'default-receiver'
      slack_configs:
      - channel: '#alerts-general'
        send_resolved: true
        title: '[{{ .Status | toUpper }}] {{ .GroupLabels.alertname }}'
        text: >-
          {{ range .Alerts }}
            *Alert:* {{ .Annotations.summary }}
            *Description:* {{ .Annotations.description }}
            *Severity:* {{ .Labels.severity }}
            *Service:* {{ .Labels.service }}
          {{ end }}

    - name: 'security-team'
      slack_configs:
      - channel: '#security-alerts'
        send_resolved: true
        title: '[SECURITY][{{ .Status | toUpper }}] {{ .GroupLabels.alertname }}'
      email_configs:
      - to: 'security-team@refactortrack.com'
        send_resolved: true

    - name: 'ops-team'
      slack_configs:
      - channel: '#ops-alerts'
        send_resolved: true
        title: '[OPS][{{ .Status | toUpper }}] {{ .GroupLabels.alertname }}'
      pagerduty_configs:
      - service_key: '${PAGERDUTY_SERVICE_KEY}'  # To be provided via environment variable
        send_resolved: true

    - name: 'infrastructure-team'
      slack_configs:
      - channel: '#infrastructure-alerts'
        send_resolved: true
        title: '[INFRA][{{ .Status | toUpper }}] {{ .GroupLabels.alertname }}'
      email_configs:
      - to: 'infrastructure-team@refactortrack.com'
        send_resolved: true

---
# AlertManager Service for exposing the web interface and mesh communication
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: refactortrack
  labels:
    app: alertmanager
    component: monitoring
    part-of: refactortrack
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9093
    targetPort: web
    protocol: TCP
  - name: mesh
    port: 9094
    targetPort: mesh
    protocol: TCP
  selector:
    app: alertmanager

---
# AlertManager Deployment for managing alerts
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: refactortrack
  labels:
    app: alertmanager
    component: monitoring
    part-of: refactortrack
    managed-by: kubernetes
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9093"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - alertmanager
              topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsNonRoot: true
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        imagePullPolicy: IfNotPresent
        args:
        - --config.file=/etc/alertmanager/alertmanager.yml
        - --storage.path=/alertmanager
        - --web.external-url=http://alertmanager.refactortrack.svc:9093
        - --cluster.listen-address=0.0.0.0:9094
        - --cluster.peer=alertmanager-0.alertmanager.refactortrack.svc:9094
        - --cluster.peer=alertmanager-1.alertmanager.refactortrack.svc:9094
        ports:
        - name: web
          containerPort: 9093
          protocol: TCP
        - name: mesh
          containerPort: 9094
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/alertmanager
        - name: storage
          mountPath: /alertmanager
      volumes:
      - name: config
        configMap:
          name: alertmanager-config
      - name: storage
        emptyDir: {}